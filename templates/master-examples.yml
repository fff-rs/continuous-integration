
{%- let examples = ["mackey-glass-rnn-regression", "mnist-image-multiclass-classification"] %}
{%- let binaries = ["example-rnn-regression", "example-mnist-classification"] %}

{%- for example in examples %}
  {# a hacky trick to upcase a &usize to an usize #}
  {% let binary = binaries.get(loop.index0 + 0).unwrap() %}
  - name: example-{{ example }}-{{ backend.execute }}-{{ ext }}
    build_log_retention: { days: 60, builds: 4 }
    public: true
    serial: true
    plan:
    - get: juice
      passed: [test-juice-{{ ext }}]
      trigger: true
{%- match backend.as_str() %}
{%- when "cuda" %}
{%- when "opencl" %}
{%- when "default" %}
{%- else %}
    - get: container-{{ ext }}
{% include "tags8.yml" %}
      trigger: true
{%- endmatch %}
    - in_parallel:
      - task: example-build-{{ example }}-{{ backend.execute }}-{{ ext }}
{%- match backend.as_str() -%}
{%- when "cuda" %}
        # image: container-{{ testenv }}-{{ backend }}
        tags: [framework:cuda]
{%- when "opencl" %}
        # image: container-{{ testenv }}-{{ backend }}
        tags: [framework:opencl]
{%- when "default" %}
        # image: container-{{ testenv }}-{{ backend }}
        tags: [framework:opencl,framework:cuda]
{%- else %}
        image: container-{{ testenv }}-{{ backend }}
        tags: []
{%- endmatch %}
        config:
          platform: linux
          inputs:
          - name: juice
          outputs:
          - name: example-binary
          caches:
          - path: cargo_home
          run:
            path: sh
            args:
            - -exc
            - |
              export RUST_LOG=juice=debug
              export RUST_BACKTRACE=1
              export CARGO_HOME=$(realpath "$(pwd)/../../cargo_home")
              echo "Sweet (cached) home is \"$CARGO_HOME\""
              mkdir -p $CARGO_HOME

              cd {{ example }}
              prepare

              {%- if backend.as_str() == "default" %}
              cargo build --release
              {%- else if backend.as_str() == "native" %}
              cargo build --release --no-default-features --features=native
              {%- else %}
              cargo build --release --no-default-features --features=native,{{ backend.name }}
              {%- endif %}
              cp ../../target/release/{{ binary }} ../../../example-binary/{{ example }}
            dir: juice/juice-examples
        on_success:
          task: example-run-{{ example }}-{{ backend.execute }}-{{ ext }}
  {%- match backend.as_str() -%}
  {%- when "cuda" %}
          # image: container-{{ testenv }}-{{ backend }}
          tags: [framework:cuda]
  {%- when "opencl" %}
          # image: container-{{ testenv }}-{{ backend }}
          tags: [framework:opencl]
  {%- when "default" %}
          # image: container-{{ testenv }}-{{ backend }}
          tags: [framework:opencl,framework:cuda]
  {%- else %}
          image: container-{{ testenv }}-{{ backend }}
          tags: []
  {%- endmatch %}
          config:
            platform: linux
            timeout: 20m
            inputs:
            - name: juice
            - name: example-binary
            caches:
            - path: cargo_home
            run:
              path: sh
              args:
              - -exc
              - |
                export RUST_LOG=juice=debug
                export RUST_BACKTRACE=1
                export CARGO_HOME=$(realpath "$(pwd)/../../cargo_home")

                cd {{ example }}
                prepare

                cp ../../../example-binary/{{ example }} ../../target/release/{{ example }}

                ../../target/release/{{ example }}

              dir: juice/juice-examples

{%- endfor %}
